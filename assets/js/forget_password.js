document.addEventListener('DOMContentLoaded', function () {
    const step1 = document.getElementById('step1');
    const step2 = document.getElementById('step2');
    const step3 = document.getElementById('step3');

    const requestOtpForm = document.getElementById('requestOtpForm');
    const verifyOtpForm = document.getElementById('verifyOtpForm');
    const resetPasswordForm = document.getElementById('resetPasswordForm');

    const userEmailOrPhoneSpan = document.getElementById('userEmailOrPhone');
    const resendOtpLink = document.getElementById('resendOtp');
    const backBtn = document.getElementById('backToStep1');

    let otp = null;
    let contact = '';
<<<<<<< HEAD
    let isSendingOtp = false;
    let isResendingOtp = false;

    function autoFillOtp(otpValue) {
        otpValue = String(otpValue);
        if (!otpValue || otpValue.length !== 6) return;
=======

    function autoFillOtp(otpValue) {
        otpValue = String(otpValue);  // √âp ki·ªÉu ·ªü ƒë√¢y ‚úÖ

        if (!otpValue || otpValue.length !== 6) return;

>>>>>>> e52dccd87bb2c1e1c40eef42beb02a23b3bff552
        const otpInputs = document.querySelectorAll('.otp-input');
        for (let i = 0; i < 6; i++) {
            otpInputs[i].value = otpValue.charAt(i);
        }
    }
<<<<<<< HEAD

    function isValidEmailOrPhone(value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const phoneRegex = /^0\d{9,10}$/;
        return emailRegex.test(value) || phoneRegex.test(value);
    }

    // G·ª≠i OTP ban ƒë·∫ßu
=======
    // B∆∞·ªõc 1: G·ª≠i OTP
    const sendBtn = requestOtpForm.querySelector('button[type="submit"]');

>>>>>>> e52dccd87bb2c1e1c40eef42beb02a23b3bff552
    requestOtpForm.addEventListener('submit', function (e) {
        e.preventDefault();
        if (isSendingOtp) return;

        contact = document.getElementById('emailOrPhone').value.trim();
        if (!contact || !isValidEmailOrPhone(contact)) {
            alert('Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i!');
            return;
        }

<<<<<<< HEAD
        isSendingOtp = true;
        const submitBtn = requestOtpForm.querySelector('button[type="submit"]');
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.textContent = 'ƒêang g·ª≠i...';
        }
=======
        // Hi·ªáu ·ª©ng loading
        sendBtn.disabled = true;
        const oldText = sendBtn.textContent;
        sendBtn.innerHTML = 'ƒêang g·ª≠i... <span class="loading-spinner"></span>';
>>>>>>> e52dccd87bb2c1e1c40eef42beb02a23b3bff552

        fetch('http://localhost/webproject/tech-store-web/back-end/php/api/send-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ contact })
        })
<<<<<<< HEAD
        .then(res => res.json())
        .then(data => {
            otp = data.otp ?? null;
            console.log('‚úÖ G·ª≠i OTP th√†nh c√¥ng:', otp);
            userEmailOrPhoneSpan.textContent = contact;
            step1.classList.add('hidden');
            step2.classList.remove('hidden');

            setTimeout(() => {
                if (otp) console.log(`üí¨ M√£ OTP (test): ${otp}`);
                autoFillOtp(otp);
            }, 1000);
        })
        .catch(err => {
            console.error('‚ùå L·ªói khi g·ª≠i OTP:', err);
            alert('Kh√¥ng th·ªÉ g·ª≠i m√£ OTP. Vui l√≤ng th·ª≠ l·∫°i sau.');
        })
        .finally(() => {
            setTimeout(() => {
                isSendingOtp = false;
                if (submitBtn) {
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'G·ª≠i y√™u c·∫ßu';
                }
            }, 1000);
        });
=======
            .then(res => res.json())
            .then(data => {
                otp = data.otp ?? null;
                // KH√îNG alert data.message n·ªØa!
                userEmailOrPhoneSpan.textContent = contact;
                step1.classList.add('hidden');
                step2.classList.remove('hidden');
                setTimeout(() => {
                    if (otp) {
                        alert(`M√£ OTP (test): ${otp}`);
                    }
                }, 500);
                setTimeout(() => {
                    autoFillOtp(otp);
                }, 1000);
            })
            .catch(err => {
                // Kh√¥ng alert l·ªói n·ªØa, ch·ªâ log ra console
                console.error('L·ªói khi g·ª≠i OTP:', err);
                // KH√îNG alert g√¨ c·∫£!
            })
            .finally(() => {
                // Tr·∫£ l·∫°i n√∫t v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
                sendBtn.disabled = false;
                sendBtn.textContent = oldText;
            });
>>>>>>> e52dccd87bb2c1e1c40eef42beb02a23b3bff552
    });

    // Quay l·∫°i b∆∞·ªõc 1
    if (backBtn) {
        backBtn.addEventListener('click', function (e) {
            e.preventDefault();
            step2.classList.add('hidden');
            step1.classList.remove('hidden');
        });
    }

    // B∆∞·ªõc 2: Nh·∫≠p OTP
    verifyOtpForm.addEventListener('submit', function (e) {
        e.preventDefault();
        const otpInputs = document.querySelectorAll('.otp-input');
        const enteredOtp = Array.from(otpInputs).map(input => input.value).join('');

        if (enteredOtp.length !== 6 || !/^\d{6}$/.test(enteredOtp)) {
            alert('Vui l√≤ng nh·∫≠p ƒë√∫ng 6 ch·ªØ s·ªë OTP.');
            return;
        }

        if (enteredOtp !== String(otp)) {
            alert('OTP kh√¥ng ƒë√∫ng.');
            return;
        }

        step2.classList.add('hidden');
        step3.classList.remove('hidden');
    });

    // G·ª≠i l·∫°i OTP
    resendOtpLink.addEventListener('click', function (e) {
        e.preventDefault();

<<<<<<< HEAD
        if (isResendingOtp || !contact) {
            alert('Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c ƒëang g·ª≠i l·∫°i.');
            return;
        }

        isResendingOtp = true;
        resendOtpLink.textContent = 'ƒêang g·ª≠i l·∫°i...';

=======
        if (!contact) {
            alert('Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng.');
            return;
        }

>>>>>>> e52dccd87bb2c1e1c40eef42beb02a23b3bff552
        fetch('http://localhost/webproject/tech-store-web/back-end/php/api/send-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ contact })
        })
<<<<<<< HEAD
        .then(res => res.json())
        .then(data => {
            otp = data.otp ?? null;
            console.log('üîÑ OTP m·ªõi t·ª´ server:', otp);

            setTimeout(() => {
                autoFillOtp(otp);
            }, 1000);
        })
        .catch(err => {
            console.error('‚ùå L·ªói khi g·ª≠i l·∫°i OTP:', err);
            alert('Kh√¥ng th·ªÉ g·ª≠i l·∫°i OTP. Vui l√≤ng th·ª≠ l·∫°i sau.');
        })
        .finally(() => {
            setTimeout(() => {
                isResendingOtp = false;
                resendOtpLink.textContent = 'G·ª≠i l·∫°i m√£';
            }, 1000);
        });
    });

    // B∆∞·ªõc 3: ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
    resetPasswordForm.addEventListener('submit', function (e) {
        e.preventDefault();

        const newPassword = document.getElementById('newPassword').value.trim();
        const confirmPassword = document.getElementById('confirmPassword').value.trim();

        const passwordValid =
            newPassword.length >= 8 &&
            /\d/.test(newPassword) &&
            /[!@#$%^&*(),.?":{}|<>]/.test(newPassword);

        if (!passwordValid) {
            alert('M·∫≠t kh·∫©u kh√¥ng ƒë·ªß m·∫°nh. Vui l√≤ng ƒë·∫£m b·∫£o:\n- T·ªëi thi·ªÉu 8 k√Ω t·ª±\n- C√≥ s·ªë\n- C√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát');
            return;
        }

        if (newPassword !== confirmPassword) {
            alert('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.');
            return;
        }

        fetch('http://localhost/webproject/tech-store-web/back-end/php/api/reset-password', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                contact: contact,
                otp: otp,
                newPassword: newPassword
            })
        })
        .then(res => {
            if (!res.ok) throw new Error(`L·ªói HTTP ${res.status}`);
            return res.json();
        })
        .then(data => {
            if (data.success) {
                alert('‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng! B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p.');
                window.location.href = 'login.html';
            } else {
                alert(`‚ùå ${data.message || 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i.'}`);
            }
        })
        .catch(err => {
            console.error('‚ùå L·ªói x·ª≠ l√Ω:', err);
            alert('L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.');
        });
    });
=======
            .then(res => res.json())
            .then(data => {
                otp = data.otp ?? null;
                console.log("OTP m·ªõi t·ª´ server:", otp);


                if (otp) {
                    alert(`M√£ OTP m·ªõi (test): ${otp}`);
                }
                setTimeout(() => {

                    autoFillOtp(otp);
                }, 1000); // ch·ªù 1 gi√¢y


                // ‚úÖ C√≥ th·ªÉ th√¥ng b√°o g·ª≠i l·∫°i th√†nh c√¥ng b√™n d∆∞·ªõi ho·∫∑c b·ªè n·∫øu kh√¥ng c·∫ßn
                if (data.message) {
                    console.log(data.message); // ho·∫∑c alert n·∫øu b·∫°n v·∫´n mu·ªën
                }
            })
            .catch(err => {
                console.error(err);
                alert('L·ªói k·∫øt n·ªëi khi g·ª≠i l·∫°i OTP.');
            });
    });


    // B∆∞·ªõc 3: ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
    resetPasswordForm.addEventListener('submit', function (e) {
        e.preventDefault();

        const newPassword = document.getElementById('newPassword').value.trim();
        const confirmPassword = document.getElementById('confirmPassword').value.trim();

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán m·∫≠t kh·∫©u
        const passwordValid =
            newPassword.length >= 8 &&
            /\d/.test(newPassword) &&
            /[!@#$%^&*(),.?":{}|<>]/.test(newPassword);

        if (!passwordValid) {
            alert('M·∫≠t kh·∫©u kh√¥ng ƒë·ªß m·∫°nh. Vui l√≤ng ki·ªÉm tra l·∫°i:\n- T·ªëi thi·ªÉu 8 k√Ω t·ª±\n- √çt nh·∫•t 1 s·ªë\n- √çt nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát');
            return;
        }

        if (newPassword !== confirmPassword) {
            alert('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.');
            return;
        }

        // G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t m·∫≠t kh·∫©u
        fetch('http://localhost/webproject/tech-store-web/back-end/php/api/reset-password', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                contact: contact,
                otp: otp,
                newPassword: newPassword
            })
        })
            .then(res => {
                // Ki·ªÉm tra HTTP status
                if (!res.ok) throw new Error(`L·ªói HTTP ${res.status}`);
                return res.json();
            })
            .then(data => {
                if (data.success) {
                    alert('‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
                    window.location.href = 'login.html';
                } else {
                    alert(`‚ùå ${data.message || 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i.'}`);
                }
            })
            .catch(err => {
                console.error('L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω:', err);
                alert('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.');
            });
    });

>>>>>>> e52dccd87bb2c1e1c40eef42beb02a23b3bff552
});
